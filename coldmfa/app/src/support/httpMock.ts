import { http, HttpResponse } from 'msw'
import { setupServer } from 'msw/node'
import { nanoid } from 'nanoid'
import type { CodeGroup, PasscodeResponse } from '@/types'

let nextIsHttpErr = false

let data: Record<string, CodeGroup> = {}

const handlers = [
  http.options('*', () => {
    return new Response(null, {
      status: 200,
      headers: {
        Allow: 'GET,HEAD,POST'
      }
    })
  }),

  http.post('http://127.0.0.1:3000/coldmfa/api/groups', () => {
    if (nextIsHttpErr) {
      nextIsHttpErr = false
      return HttpResponse.json({ error: 'A test error' }, { status: 500 })
    }

    const newGroup = {
      groupId: nanoid(),
      name: 'Test Group',
      codes: []
    }
    data[newGroup.groupId] = newGroup

    return HttpResponse.json(newGroup, { status: 201 })
  }),

  http.post(
    'http://127.0.0.1:3000/coldmfa/api/groups/:groupId/codes',
    async ({ request, params }) => {
      if (nextIsHttpErr) {
        nextIsHttpErr = false
        return HttpResponse.json({ error: 'A test error' }, { status: 500 })
      }

      const r = await request.json()
      if (!r || typeof r !== 'object') {
        throw new Error('expected create code request')
      }

      const newCode = {
        codeId: nanoid(),
        name: new URL(r['original']).pathname.substring(1),
        deleted: false
      }

      const groupId = params['groupId'] as string
      const existingGroup = data[groupId]
      if (!existingGroup) {
        throw new Error('missing group')
      }
      if (!existingGroup.codes) {
        existingGroup.codes = []
      }

      existingGroup.codes.push(newCode)

      return HttpResponse.json(newCode, { status: 201 })
    }
  ),

  http.get('http://127.0.0.1:3000/coldmfa/api/groups/:groupId/codes/:codeId', async () => {
    if (nextIsHttpErr) {
      nextIsHttpErr = false
      return HttpResponse.json({ error: 'A test error' }, { status: 500 })
    }

    const response = {
      serverTime: Math.round(new Date().valueOf() / 1000),
      passcode: '123456',
      nextPasscode: '654321',
      period: 30
    } as PasscodeResponse

    return HttpResponse.json(response, { status: 200 })
  }),

  http.get('http://127.0.0.1:3000/coldmfa/api/groups/:groupId/codes/:codeId/qr', async () => {
    const qrBase64 =
      ''
    const response = Uint8Array.from(atob(qrBase64), (c) => c.charCodeAt(0))

    return HttpResponse.arrayBuffer(response, { status: 200 })
  }),

  http.put(
    'http://127.0.0.1:3000/coldmfa/api/groups/:groupId/codes/:codeId',
    async ({ request, params }) => {
      if (nextIsHttpErr) {
        nextIsHttpErr = false
        return HttpResponse.json({ error: 'A test error' }, { status: 500 })
      }

      const groupId = params['groupId'] as string
      const codeId = params['codeId'] as string

      const req = (await request.json()) as Record<string, string>
      const preferredName = req['preferredName']

      if (!data[groupId]) {
        return HttpResponse.json({ error: 'Group not found' }, { status: 404 })
      }

      if (!data[groupId].codes) {
        return HttpResponse.json({ error: 'Code not found' }, { status: 400 })
      }

      data[groupId].codes!.forEach((code) => {
        if (code.codeId === codeId) {
          code.preferredName = preferredName
        }
      })

      return new HttpResponse(null, { status: 204 })
    }
  ),

  http.delete(
    'http://127.0.0.1:3000/coldmfa/api/groups/:groupId/codes/:codeId',
    async ({ params }) => {
      if (nextIsHttpErr) {
        nextIsHttpErr = false
        return HttpResponse.json({ error: 'A test error' }, { status: 500 })
      }

      const groupId = params['groupId'] as string
      const codeId = params['codeId'] as string

      if (!data[groupId]) {
        return HttpResponse.json({ error: 'Group not found' }, { status: 404 })
      }

      if (!data[groupId].codes) {
        return HttpResponse.json({ error: 'Code not found' }, { status: 400 })
      }

      data[groupId].codes!.forEach((code) => {
        if (code.codeId === codeId) {
          code.deleted = true
          code.deletedAt = Math.floor(new Date().valueOf() / 1000)
        }
      })

      return new HttpResponse(null, { status: 204 })
    }
  )
]

const server = setupServer(...handlers)

export const setNextIsHttpErr = () => {
  nextIsHttpErr = true
}

export const startHttpMockServer = () => {
  server.listen()
}

export const resetHttpMockServer = () => {
  nextIsHttpErr = false
  data = {}
  server.resetHandlers()
}

export const stopHttpMockServer = () => {
  server.close()
}
